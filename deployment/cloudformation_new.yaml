---
Description: Sets up all the resources to build a Dynamo DB table replicated via streams
  to an Amazon Opensearch Service domain. ***Note*** This template deploys resources
  that will result in charges to your AWS account
Parameters:
  StackPrefix:
    Type: String
    Default: imdbddbes
    Description: Enter a short string to use as a prefix for all resources
  OpensearchMoviesIndexName:
    Type: String
    Default: movies
    Description: Enter a name for the movies index in Opensearch
Mappings:
  Constants:
    S3Keys:
      MovieSourceData: ImdbTrimmed.txt
      DDBStreamingLambdaFunctionCode: lambda_ddb_streaming_function.zip
      WiringLambdaFunctionCode: lambda_wiring_function.zip
      DDBUpdateLambdaFunctionCode: lambda_ddb_update_function.zip
      DDBUpdateItemLambdaFunctionCode: lambda_ddb_update_item_function.zip
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ImdbDdbEsUserPool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ImdbDdbEsIdentityPool
      AllowUnauthenticatedIdentities: 'true'
      DeveloperProviderName: ImdbDdbEsDomain
  IdentityPoolRoleAttachment:
    DependsOn: AuthUserRole
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - AuthUserRole
          - Arn
  AuthUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - Ref: StackPrefix
          - "-Cognito-AuthRole"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: CognitoIdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - Ref: StackPrefix
            - "-lambda-execution"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            - cognito-identity:*
            Resource:
            - "*"
  OpensearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName:
        Fn::Join:
        - ''
        - - Ref: StackPrefix
          - "-domain"
      EngineVersion: 'OpenSearch_1.3'
      ClusterConfig:
        DedicatedMasterEnabled: false
        ZoneAwarenessEnabled: false
        InstanceCount: '1'
        InstanceType: m3.medium.search
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - AuthUserRole
              - Arn
          Action:
          - es:*
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:es:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - domain/
              - Fn::Join:
                - ''
                - - Ref: StackPrefix
                  - "-domain"
              - "/*"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - Ref: StackPrefix
          - "-lambda_role"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - Ref: StackPrefix
            - "-lambda-execution"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: arn:aws:lambda:*:*:function:*
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - 'imdb-ddb-os-lab-'
                - Ref: AWS::Region
                - "-"
                - Ref: AWS::AccountId
                - "/*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: arn:aws:dynamodb:*:*:table/*
          - Effect: Allow
            Action:
            - cognito-idp:*
            Resource: arn:aws:cognito-idp:*:*:userpool/*
          - Effect: Allow
            Action:
            - es:*
            Resource:
            - "*"
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Join:
        - ''
        - - Ref: StackPrefix
          - "-table"
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  FunctionSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: DDBStreamingLambdaFunction
    Properties:
      BatchSize: 100
      Enabled: 'true'
      EventSourceArn:
        Fn::GetAtt:
        - DDBTable
        - StreamArn
      FunctionName:
        Fn::GetAtt:
        - DDBStreamingLambdaFunction
        - Arn
      StartingPosition: TRIM_HORIZON
  DDBStreamingLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - LambdaExecutionRole
    - OpensearchDomain
    - DDBTable
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.9
      Timeout: '60'
      Code:
        S3Bucket:
          Fn::Join:
          - ''
          - - 'imdb-ddb-os-lab-'
            - Ref: AWS::Region
            - "-"
            - Ref: AWS::AccountId
        S3Key:
          Fn::FindInMap:
          - Constants
          - S3Keys
          - DDBStreamingLambdaFunctionCode
      Environment:
        Variables:
          AES_ENDPOINT:
            Fn::GetAtt:
            - OpensearchDomain
            - DomainEndpoint
          MOVIES_INDEX_NAME:
            Ref: OpensearchMoviesIndexName
          REGION:
            Ref: AWS::Region
  WiringFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - LambdaExecutionRole
    - DDBTable
    - FunctionSourceMapping
    - OpensearchDomain
    - CognitoUserPool
    - CognitoIdentityPool
    Properties:
      Handler: lambda_wiring_function.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          AES_ENDPOINT:
            Fn::GetAtt:
            - OpensearchDomain
            - DomainEndpoint
          S3_BUCKET:
            Fn::Join:
            - ''
            - - 'imdb-ddb-os-lab-'
              - Ref: AWS::Region
              - "-"
              - Ref: AWS::AccountId
          S3_MOVIE_KEY:
            Fn::FindInMap:
            - Constants
            - S3Keys
            - MovieSourceData
          DDB_TABLE_NAME:
            Fn::Join:
            - ''
            - - Ref: StackPrefix
              - "-table"
          REGION:
            Ref: AWS::Region
          MOVIES_INDEX_NAME:
            Ref: OpensearchMoviesIndexName
          STACK_PREFIX:
            Ref: StackPrefix
          USER_POOL_ID:
            Ref: CognitoUserPool
          IDENTITY_POOL_ID:
            Ref: CognitoIdentityPool
      Code:
        S3Bucket:
          Fn::Join:
          - ''
          - - 'imdb-ddb-os-lab-'
            - Ref: AWS::Region
            - "-"
            - Ref: AWS::AccountId
        S3Key:
          Fn::FindInMap:
          - Constants
          - S3Keys
          - WiringLambdaFunctionCode
  WiringFunctionInvocation:
    Type: Custom::WiringFunctionInvocation
    DependsOn: WiringFunction
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - WiringFunction
        - Arn
      Region:
        Ref: AWS::Region
  DDBUpdateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_streaming_function.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          DDB_TABLE_NAME:
            Fn::Join:
            - ''
            - - Ref: StackPrefix
              - "-table"
          REGION:
            Ref: AWS::Region
      Code:
        S3Bucket:
          Fn::Join:
          - ''
          - - 'imdb-ddb-os-lab-'
            - Ref: AWS::Region
            - "-"
            - Ref: AWS::AccountId
        S3Key:
          Fn::FindInMap:
          - Constants
          - S3Keys
          - DDBUpdateLambdaFunctionCode
  DDBUpdateItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_update_item_function.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          DDB_TABLE_NAME:
            Fn::Join:
            - ''
            - - Ref: StackPrefix
              - "-table"
          REGION:
            Ref: AWS::Region
      Code:
        S3Bucket:
          Fn::Join:
          - ''
          - - 'imdb-ddb-os-lab-'
            - Ref: AWS::Region
            - "-"
            - Ref: AWS::AccountId
        S3Key:
          Fn::FindInMap:
          - Constants
          - S3Keys
          - DDBUpdateItemLambdaFunctionCode
  # API gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway to update specific ddb item
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: 
        Fn::Join:
        - ''
        - - Ref: StackPrefix
          - "-ddb-update-item"

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt DDBUpdateItemFunction.Arn
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayRootMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: updates

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DDBUpdateItemFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/
